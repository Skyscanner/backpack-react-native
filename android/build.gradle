// Top-level build file where you can add configuration options common to all sub-projects/modules.
import org.gradle.api.artifacts.repositories.PasswordCredentials

buildscript {
    ext.kotlin_version = '1.6.10'
    repositories {
      google()
      mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.2.1'
        classpath("com.facebook.react:react-native-gradle-plugin")
        classpath("de.undercouch:gradle-download-task:5.0.1")
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.github.kezong:fat-aar:1.3.6'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

ext {
  internalBuild       = project.hasProperty("internalBuild") && project.internalBuild
  backpackVersion     = "42.2.2"
  compileSdkVersion   = 33
  targetSdkVersion    = 33
  minSdkVersion       = 24
  androidx            = '1.6.0'
  appcompat           = '1.3.1'
  playServicesVersion = "17.0.0"
  androidMapsUtilsVersion = "xxx"
  threetenabpVersion = "1.4.0"
  if (System.properties['os.arch'] == "aarch64") {
    // For M1 Users we need to use the NDK 24 which added support for aarch64
    ndkVersion = "24.0.8215888"
  } else {
    // Otherwise we default to the side-by-side NDK version from AGP.
    ndkVersion = "21.4.7075529"
  }
}

allprojects {
    repositories {
        google()
        mavenCentral()

        maven {
            // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
            url "$rootDir/../node_modules/react-native/android"
        }
        maven {
            // Android JSC is installed from npm
            url("$rootDir/../node_modules/jsc-android/dist")
        }

        mavenCentral {
            // We don't want to fetch react-native from Maven Central as there are
            // older versions over there.
            content {
                excludeGroup "com.facebook.react"
            }
        }

        if (rootProject.ext.internalBuild || isUseRelative()) {

          // Get the credentials for internal builds
          def localProperties = new Properties()
          if (rootProject.file("local.properties").exists()) {
              localProperties.load(rootProject.file("local.properties").newDataInputStream())
          }
        }

        buildscript {
            repositories {
                google()
                mavenCentral()
            }
        }
    }

    // Force dependency resolution of backpack-android to a specific version
      if (System.getenv("OVERRIDE_BACKPACK_VERSION")) {
        afterEvaluate { project ->
            project.configurations.all {
                resolutionStrategy.eachDependency { DependencyResolveDetails details ->
                    if (details.requested.name == "backpack-android") {
                        details.useVersion System.getenv("OVERRIDE_BACKPACK_VERSION")
                    }
                }
            }
        }
    }
}

allprojects { project ->
  if (project.name == "app" || project.name == "backpack-react-native") {
    configurations {
      ktlint
    }

    dependencies {
      ktlint "com.pinterest:ktlint:0.43.2"
    }

    afterEvaluate {

      def files = project.hasProperty("ktlintFiles") ? project.ktlintFiles : "src/**/*.kt"

      task ktlint(type: JavaExec, group: "verification") {
        description = "Check Kotlin code style."
        classpath = configurations.ktlint
        main = "com.pinterest.ktlint.Main"
        args files, "--editorconfig=${rootProject.projectDir}/.editorconfig"
        // to generate report in checkstyle format prepend following args:
        // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
        // see https://github.com/pinterest/ktlint#usage for more
      }

      check.dependsOn ktlint

      task ktlintFormat(type: JavaExec, group: "formatting") {
        description = "Fix Kotlin code style deviations."
        classpath = configurations.ktlint
        main = "com.pinterest.ktlint.Main"
        args "-F", files, "--editorconfig=${rootProject.projectDir}/.editorconfig"
      }
    }
  }
}

def isUseRelative() {
  Properties localProps = new Properties()
  def localPropsFile = rootProject.file('../.env')
  if (localPropsFile.exists()) {
    localProps.load(localPropsFile.newDataInputStream())
  }

  return localProps.getOrDefault("USE_RELATIVE", "false") == "true"
}
