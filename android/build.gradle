// Top-level build file where you can add configuration options common to all sub-projects/modules.
import groovy.json.JsonSlurper

buildscript {
    ext.kotlin_version = '1.3.21'
    repositories {
        google()
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.3.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
        classpath 'com.kezong:fat-aar:1.2.7'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        mavenLocal()
        google()
        jcenter()
        maven {
            // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
            url "$rootDir/../node_modules/react-native/android"
        }
        maven {
            // Android JSC is installed from npm
            url("$rootDir/../node_modules/jsc-android/dist")
        }
        maven { url 'https://jitpack.io' }

        buildscript {
            repositories {
                google()
                mavenCentral()
            }
        }
    }

    // Force dependency resolution of backpack-android to a specific version
    if (project.hasProperty("backpack-version")) {
        afterEvaluate { project ->
            project.configurations.all {
                resolutionStrategy.eachDependency { DependencyResolveDetails details ->
                    if (details.requested.name == "backpack-android") {
                        details.useVersion project["backpack-version"]
                    }
                }
            }
        }
    }
}

ext {
    backpackVersion     = "15.0.0"
    compileSdkVersion   = 29
    targetSdkVersion    = 29
    minSdkVersion       = 21
    buildToolsVersion   = "29.0.2"
    androidx            = '1.0.2'
    appcompat           = '1.0.2'
    supportLibVersion = "27.1.1"
    playServicesVersion = "xxx"
    androidMapsUtilsVersion = "0.5+"
}

def static getVersionFromJsPackage(project) {
    def packageJson = getPackageJson(project)
    def version = packageJson.version

    def isSnapshot = System.getenv("SNAPSHOT") ?: false
    if (isSnapshot) {
        version = version + "-SNAPSHOT"
    }

    return version
}

def static getPackageJson(project) {
    def packageJson = new File(project.projectDir, '../../package.json').getText('UTF-8')
    def jsonSlurper = new JsonSlurper()
    return jsonSlurper.parseText(packageJson)
}
