// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Android BpkCarousel should render correctly 1`] = `
<View
  onLayout={[Function]}
  style={
    Object {
      "width": 4,
    }
  }
>
  <RCTScrollView
    accessibilityLabel="I'm accessible"
    accessible={true}
    canChangeSize={false}
    contentHeight={0}
    contentWidth={0}
    dataProvider={
      DataProvider {
        "_data": Array [
          <BpkCarouselItem
            style={null}
          >
            <BpkText
              emphasize={null}
              style={null}
              textStyle="base"
              weight="regular"
            >
              View 1
            </BpkText>
          </BpkCarouselItem>,
        ],
        "_firstIndexToProcess": 0,
        "_size": 1,
        "rowHasChanged": [Function],
      }
    }
    disableRecycling={false}
    externalScrollView={[Function]}
    horizontal={true}
    initialOffset={0}
    initialRenderIndex={0}
    isHorizontal={true}
    layoutProvider={
      LayoutProvider {
        "_getLayoutTypeForIndex": [Function],
        "_setLayoutForType": [Function],
      }
    }
    onEndReachedThreshold={0}
    onLayout={[Function]}
    onScroll={[Function]}
    onSizeChanged={[Function]}
    pagingEnabled={true}
    removeClippedSubviews={false}
    renderAheadOffset={250}
    rowRenderer={[Function]}
    scrollEventThrottle={250}
    scrollThrottle={250}
    showsHorizontalScrollIndicator={false}
  >
    <View>
      <View
        style={
          Object {
            "flexDirection": "row",
          }
        }
      >
        <View
          style={
            Object {
              "height": 0,
              "width": 0,
            }
          }
        />
      </View>
    </View>
  </RCTScrollView>
  <View
    accessibilityLabel="I'm accessible"
    childrenSortFn={[Function]}
    pointerEvents="box-none"
    style={
      Array [
        Object {
          "alignItems": "center",
          "backgroundColor": "rgba(37, 32, 51, 0.3)",
          "borderRadius": 4,
          "flexDirection": "row",
          "height": 24,
          "justifyContent": "center",
          "paddingHorizontal": 12,
          "paddingVertical": 8,
          "width": 72,
        },
        Object {
          "alignSelf": "center",
          "bottom": 32,
        },
      ]
    }
  >
    <View
      collapsable={undefined}
      style={
        Object {
          "backgroundColor": "rgb(255, 255, 255)",
          "borderRadius": 40,
          "height": 6,
          "marginHorizontal": 2,
          "width": 6,
        }
      }
    />
  </View>
</View>
`;

exports[`Android BpkCarousel should render correctly with an "accessibilityLabel" function 1`] = `
<View
  onLayout={[Function]}
  style={null}
>
  <RCTScrollView
    accessibilityLabel="0 of 1"
    accessible={true}
    canChangeSize={false}
    contentHeight={0}
    contentWidth={0}
    dataProvider={
      DataProvider {
        "_data": Array [
          <BpkCarouselItem
            style={null}
          >
            <BpkText
              emphasize={null}
              style={null}
              textStyle="base"
              weight="regular"
            >
              View 1
            </BpkText>
          </BpkCarouselItem>,
        ],
        "_firstIndexToProcess": 0,
        "_size": 1,
        "rowHasChanged": [Function],
      }
    }
    disableRecycling={false}
    externalScrollView={[Function]}
    horizontal={true}
    initialOffset={0}
    initialRenderIndex={0}
    isHorizontal={true}
    layoutProvider={
      LayoutProvider {
        "_getLayoutTypeForIndex": [Function],
        "_setLayoutForType": [Function],
      }
    }
    onEndReachedThreshold={0}
    onLayout={[Function]}
    onScroll={[Function]}
    onSizeChanged={[Function]}
    pagingEnabled={true}
    removeClippedSubviews={false}
    renderAheadOffset={250}
    rowRenderer={[Function]}
    scrollEventThrottle={250}
    scrollThrottle={250}
    showsHorizontalScrollIndicator={false}
  >
    <View>
      <View
        style={
          Object {
            "flexDirection": "row",
          }
        }
      >
        <View
          style={
            Object {
              "height": 0,
              "width": 0,
            }
          }
        />
      </View>
    </View>
  </RCTScrollView>
  <View
    accessibilityLabel="0 of 1"
    childrenSortFn={[Function]}
    pointerEvents="box-none"
    style={
      Array [
        Object {
          "alignItems": "center",
          "backgroundColor": "rgba(37, 32, 51, 0.3)",
          "borderRadius": 4,
          "flexDirection": "row",
          "height": 24,
          "justifyContent": "center",
          "paddingHorizontal": 12,
          "paddingVertical": 8,
          "width": 72,
        },
        Object {
          "alignSelf": "center",
          "bottom": 32,
        },
      ]
    }
  >
    <View
      collapsable={undefined}
      style={
        Object {
          "backgroundColor": "rgb(255, 255, 255)",
          "borderRadius": 40,
          "height": 6,
          "marginHorizontal": 2,
          "width": 6,
        }
      }
    />
  </View>
</View>
`;

exports[`Android BpkCarousel should render correctly without indicators 1`] = `
<View
  onLayout={[Function]}
  style={null}
>
  <RCTScrollView
    accessibilityLabel="I'm accessible"
    accessible={true}
    canChangeSize={false}
    contentHeight={0}
    contentWidth={0}
    dataProvider={
      DataProvider {
        "_data": Array [
          <BpkCarouselItem
            style={null}
          >
            <BpkText
              emphasize={null}
              style={null}
              textStyle="base"
              weight="regular"
            >
              View 1
            </BpkText>
          </BpkCarouselItem>,
        ],
        "_firstIndexToProcess": 0,
        "_size": 1,
        "rowHasChanged": [Function],
      }
    }
    disableRecycling={false}
    externalScrollView={[Function]}
    horizontal={true}
    initialOffset={0}
    initialRenderIndex={0}
    isHorizontal={true}
    layoutProvider={
      LayoutProvider {
        "_getLayoutTypeForIndex": [Function],
        "_setLayoutForType": [Function],
      }
    }
    onEndReachedThreshold={0}
    onLayout={[Function]}
    onScroll={[Function]}
    onSizeChanged={[Function]}
    pagingEnabled={true}
    removeClippedSubviews={false}
    renderAheadOffset={250}
    rowRenderer={[Function]}
    scrollEventThrottle={250}
    scrollThrottle={250}
    showsHorizontalScrollIndicator={false}
  >
    <View>
      <View
        style={
          Object {
            "flexDirection": "row",
          }
        }
      >
        <View
          style={
            Object {
              "height": 0,
              "width": 0,
            }
          }
        />
      </View>
    </View>
  </RCTScrollView>
</View>
`;
