// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`iOS BpkNavigationBarTextButtonIOS should render correctly 1`] = `
<View
  accessibilityLabel="Edit"
  accessibilityRole="button"
  accessibilityStates={Array []}
  accessible={true}
  clickable={true}
  isTVSelectable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "height": "100%",
      "justifyContent": "center",
      "marginEnd": 8,
      "opacity": 1,
      "zIndex": 2,
    }
  }
>
  <Text
    style={
      Array [
        Object {
          "color": "rgb(17, 18, 54)",
          "fontFamily": "System",
          "fontSize": 16,
          "fontWeight": "400",
          "letterSpacing": 0.12,
        },
        Object {},
        Array [
          Object {
            "color": "rgb(17, 18, 54)",
          },
        ],
      ]
    }
  >
    Edit
  </Text>
</View>
`;

exports[`iOS BpkNavigationBarTextButtonIOS should render correctly disabled 1`] = `
<View
  accessibilityLabel="Done"
  accessibilityRole="button"
  accessibilityStates={
    Array [
      "disabled",
    ]
  }
  accessible={true}
  clickable={true}
  isTVSelectable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "height": "100%",
      "justifyContent": "center",
      "marginEnd": 8,
      "opacity": 1,
      "zIndex": 2,
    }
  }
>
  <Text
    style={
      Array [
        Object {
          "color": "rgb(17, 18, 54)",
          "fontFamily": "System",
          "fontSize": 16,
          "fontWeight": "400",
          "letterSpacing": 0.12,
        },
        Object {},
        Array [
          Object {
            "color": "rgb(178, 178, 191)",
          },
        ],
      ]
    }
  >
    Done
  </Text>
</View>
`;

exports[`iOS BpkNavigationBarTextButtonIOS should render correctly emphasize 1`] = `
<View
  accessibilityLabel="Done"
  accessibilityRole="button"
  accessibilityStates={Array []}
  accessible={true}
  clickable={true}
  isTVSelectable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "height": "100%",
      "justifyContent": "center",
      "marginEnd": 8,
      "opacity": 1,
      "zIndex": 2,
    }
  }
>
  <Text
    style={
      Array [
        Object {
          "color": "rgb(17, 18, 54)",
          "fontFamily": "System",
          "fontSize": 16,
          "fontWeight": "400",
          "letterSpacing": 0.12,
        },
        Object {
          "fontWeight": "600",
        },
        Array [
          Object {
            "color": "rgb(17, 18, 54)",
          },
        ],
      ]
    }
  >
    Done
  </Text>
</View>
`;

exports[`iOS BpkNavigationBarTextButtonIOS should render correctly leading configuration 1`] = `
<View
  accessibilityLabel="Cancel"
  accessibilityRole="button"
  accessibilityStates={Array []}
  accessible={true}
  clickable={true}
  isTVSelectable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "height": "100%",
      "justifyContent": "center",
      "marginStart": 8,
      "opacity": 1,
      "zIndex": 2,
    }
  }
>
  <Text
    style={
      Array [
        Object {
          "color": "rgb(17, 18, 54)",
          "fontFamily": "System",
          "fontSize": 16,
          "fontWeight": "400",
          "letterSpacing": 0.12,
        },
        Object {},
        Array [
          Object {
            "color": "rgb(17, 18, 54)",
          },
        ],
      ]
    }
  >
    Cancel
  </Text>
</View>
`;

exports[`iOS BpkNavigationBarTextButtonIOS should render correctly with type="primary" 1`] = `
<View
  accessibilityLabel="Done"
  accessibilityRole="button"
  accessibilityStates={Array []}
  accessible={true}
  clickable={true}
  isTVSelectable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "height": "100%",
      "justifyContent": "center",
      "marginEnd": 8,
      "opacity": 1,
      "zIndex": 2,
    }
  }
>
  <Text
    style={
      Array [
        Object {
          "color": "rgb(17, 18, 54)",
          "fontFamily": "System",
          "fontSize": 16,
          "fontWeight": "400",
          "letterSpacing": 0.12,
        },
        Object {},
        Array [
          Object {
            "color": "rgb(0, 178, 214)",
          },
        ],
      ]
    }
  >
    Done
  </Text>
</View>
`;

exports[`iOS BpkNavigationBarTextButtonIOS should render correctly with type="primary" and disabled 1`] = `
<View
  accessibilityLabel="Done"
  accessibilityRole="button"
  accessibilityStates={
    Array [
      "disabled",
    ]
  }
  accessible={true}
  clickable={true}
  isTVSelectable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "height": "100%",
      "justifyContent": "center",
      "marginEnd": 8,
      "opacity": 1,
      "zIndex": 2,
    }
  }
>
  <Text
    style={
      Array [
        Object {
          "color": "rgb(17, 18, 54)",
          "fontFamily": "System",
          "fontSize": 16,
          "fontWeight": "400",
          "letterSpacing": 0.12,
        },
        Object {},
        Array [
          Object {
            "color": "rgb(178, 178, 191)",
          },
        ],
      ]
    }
  >
    Done
  </Text>
</View>
`;

exports[`iOS BpkNavigationBarTextButtonIOS should respect "disabledTintColor" over "type" 1`] = `
<View
  accessibilityLabel="Done"
  accessibilityRole="button"
  accessibilityStates={
    Array [
      "disabled",
    ]
  }
  accessible={true}
  clickable={true}
  isTVSelectable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "height": "100%",
      "justifyContent": "center",
      "marginEnd": 8,
      "opacity": 1,
      "zIndex": 2,
    }
  }
>
  <Text
    style={
      Array [
        Object {
          "color": "rgb(17, 18, 54)",
          "fontFamily": "System",
          "fontSize": 16,
          "fontWeight": "400",
          "letterSpacing": 0.12,
        },
        Object {},
        Array [
          Object {
            "color": "red",
          },
        ],
      ]
    }
  >
    Done
  </Text>
</View>
`;

exports[`iOS BpkNavigationBarTextButtonIOS should respect "primaryTintColor" over "tintColor" if type="primary" 1`] = `
<View
  accessibilityLabel="Done"
  accessibilityRole="button"
  accessibilityStates={Array []}
  accessible={true}
  clickable={true}
  isTVSelectable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "height": "100%",
      "justifyContent": "center",
      "marginEnd": 8,
      "opacity": 1,
      "zIndex": 2,
    }
  }
>
  <Text
    style={
      Array [
        Object {
          "color": "rgb(17, 18, 54)",
          "fontFamily": "System",
          "fontSize": 16,
          "fontWeight": "400",
          "letterSpacing": 0.12,
        },
        Object {},
        Array [
          Object {
            "color": "blue",
          },
        ],
      ]
    }
  >
    Done
  </Text>
</View>
`;

exports[`iOS BpkNavigationBarTextButtonIOS should respect "tintColor" over "primaryTintColor" if type="default" 1`] = `
<View
  accessibilityLabel="Done"
  accessibilityRole="button"
  accessibilityStates={Array []}
  accessible={true}
  clickable={true}
  isTVSelectable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "height": "100%",
      "justifyContent": "center",
      "marginEnd": 8,
      "opacity": 1,
      "zIndex": 2,
    }
  }
>
  <Text
    style={
      Array [
        Object {
          "color": "rgb(17, 18, 54)",
          "fontFamily": "System",
          "fontSize": 16,
          "fontWeight": "400",
          "letterSpacing": 0.12,
        },
        Object {},
        Array [
          Object {
            "color": "red",
          },
        ],
      ]
    }
  >
    Done
  </Text>
</View>
`;

exports[`iOS BpkNavigationBarTextButtonIOS should respect "tintColor" over "type" 1`] = `
<View
  accessibilityLabel="Done"
  accessibilityRole="button"
  accessibilityStates={Array []}
  accessible={true}
  clickable={true}
  isTVSelectable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "height": "100%",
      "justifyContent": "center",
      "marginEnd": 8,
      "opacity": 1,
      "zIndex": 2,
    }
  }
>
  <Text
    style={
      Array [
        Object {
          "color": "rgb(17, 18, 54)",
          "fontFamily": "System",
          "fontSize": 16,
          "fontWeight": "400",
          "letterSpacing": 0.12,
        },
        Object {},
        Array [
          Object {
            "color": "red",
          },
        ],
      ]
    }
  >
    Done
  </Text>
</View>
`;
