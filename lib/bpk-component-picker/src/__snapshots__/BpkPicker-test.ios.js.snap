// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`iOS BpkPicker dark mode should render correctly 1`] = `
<Modal
  animationType="slide"
  hardwareAccelerated={false}
  onShow={[Function]}
  supportedOrientations={
    Array [
      "portrait",
      "landscape",
    ]
  }
  transparent={true}
  visible={false}
>
  <View
    accessible={true}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "flex": 1,
      }
    }
  />
  <View
    style={
      Object {
        "backgroundColor": "rgb(44, 44, 46)",
        "bottom": 0,
        "flexDirection": "column",
        "position": "absolute",
        "width": "100%",
      }
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "backgroundColor": "rgb(29, 27, 32)",
          "borderColor": "rgb(205, 205, 215)",
          "borderTopWidth": 0,
          "flex": 1,
          "flexDirection": "row",
          "height": 45,
          "justifyContent": "flex-end",
          "paddingHorizontal": 16,
        }
      }
    >
      <View
        accessibilityLabel="Done"
        accessibilityRole="button"
        accessible={true}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "opacity": 1,
          }
        }
      >
        <View
          style={
            Array [
              Object {
                "alignItems": "center",
                "flexDirection": "row",
                "justifyContent": "center",
                "minHeight": 32,
              },
            ]
          }
        >
          <Text
            allowFontScaling={false}
            numberOfLines={1}
            style={
              Array [
                Object {
                  "color": "rgb(255, 255, 255)",
                  "fontFamily": "System",
                  "fontSize": 14,
                  "fontWeight": "400",
                  "letterSpacing": 0.154,
                  "textAlign": "left",
                },
                Object {
                  "fontWeight": "700",
                },
                Object {
                  "color": "rgb(109, 159, 235)",
                  "fontSize": 17,
                },
              ]
            }
          >
            Done
          </Text>
        </View>
      </View>
    </View>
    <View>
      <RCTPicker
        items={
          Array [
            Object {
              "label": "foo",
              "textColor": undefined,
              "value": "foo",
            },
            Object {
              "label": "bar",
              "textColor": undefined,
              "value": "bar",
            },
          ]
        }
        onChange={[Function]}
        selectedIndex={0}
        style={
          Array [
            Object {
              "height": 216,
            },
            Object {
              "color": "rgb(255, 255, 255)",
            },
          ]
        }
      />
    </View>
  </View>
</Modal>
`;

exports[`iOS BpkPicker dark mode should render correctly with a selected value 1`] = `
<Modal
  animationType="slide"
  hardwareAccelerated={false}
  onShow={[Function]}
  supportedOrientations={
    Array [
      "portrait",
      "landscape",
    ]
  }
  transparent={true}
  visible={false}
>
  <View
    accessible={true}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "flex": 1,
      }
    }
  />
  <View
    style={
      Object {
        "backgroundColor": "rgb(44, 44, 46)",
        "bottom": 0,
        "flexDirection": "column",
        "position": "absolute",
        "width": "100%",
      }
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "backgroundColor": "rgb(29, 27, 32)",
          "borderColor": "rgb(205, 205, 215)",
          "borderTopWidth": 0,
          "flex": 1,
          "flexDirection": "row",
          "height": 45,
          "justifyContent": "flex-end",
          "paddingHorizontal": 16,
        }
      }
    >
      <View
        accessibilityLabel="Done"
        accessibilityRole="button"
        accessible={true}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "opacity": 1,
          }
        }
      >
        <View
          style={
            Array [
              Object {
                "alignItems": "center",
                "flexDirection": "row",
                "justifyContent": "center",
                "minHeight": 32,
              },
            ]
          }
        >
          <Text
            allowFontScaling={false}
            numberOfLines={1}
            style={
              Array [
                Object {
                  "color": "rgb(255, 255, 255)",
                  "fontFamily": "System",
                  "fontSize": 14,
                  "fontWeight": "400",
                  "letterSpacing": 0.154,
                  "textAlign": "left",
                },
                Object {
                  "fontWeight": "700",
                },
                Object {
                  "color": "rgb(109, 159, 235)",
                  "fontSize": 17,
                },
              ]
            }
          >
            Done
          </Text>
        </View>
      </View>
    </View>
    <View>
      <RCTPicker
        items={
          Array [
            Object {
              "label": "foo",
              "textColor": undefined,
              "value": "foo",
            },
            Object {
              "label": "bar",
              "textColor": undefined,
              "value": "bar",
            },
          ]
        }
        onChange={[Function]}
        selectedIndex={0}
        style={
          Array [
            Object {
              "height": 216,
            },
            Object {
              "color": "rgb(255, 255, 255)",
            },
          ]
        }
      />
    </View>
  </View>
</Modal>
`;

exports[`iOS BpkPicker light mode should render correctly 1`] = `
<Modal
  animationType="slide"
  hardwareAccelerated={false}
  onShow={[Function]}
  supportedOrientations={
    Array [
      "portrait",
      "landscape",
    ]
  }
  transparent={true}
  visible={false}
>
  <View
    accessible={true}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "flex": 1,
      }
    }
  />
  <View
    style={
      Object {
        "backgroundColor": "#d0d4da",
        "bottom": 0,
        "flexDirection": "column",
        "position": "absolute",
        "width": "100%",
      }
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "backgroundColor": "#f9f9f9",
          "borderColor": "rgb(205, 205, 215)",
          "borderTopWidth": 1,
          "flex": 1,
          "flexDirection": "row",
          "height": 45,
          "justifyContent": "flex-end",
          "paddingHorizontal": 16,
        }
      }
    >
      <View
        accessibilityLabel="Done"
        accessibilityRole="button"
        accessible={true}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "opacity": 1,
          }
        }
      >
        <View
          style={
            Array [
              Object {
                "alignItems": "center",
                "flexDirection": "row",
                "justifyContent": "center",
                "minHeight": 32,
              },
            ]
          }
        >
          <Text
            allowFontScaling={false}
            numberOfLines={1}
            style={
              Array [
                Object {
                  "color": "rgb(17, 18, 54)",
                  "fontFamily": "System",
                  "fontSize": 14,
                  "fontWeight": "400",
                  "letterSpacing": 0.154,
                  "textAlign": "left",
                },
                Object {
                  "fontWeight": "700",
                },
                Object {
                  "color": "#007aff",
                  "fontSize": 17,
                },
              ]
            }
          >
            Done
          </Text>
        </View>
      </View>
    </View>
    <View>
      <RCTPicker
        items={
          Array [
            Object {
              "label": "foo",
              "textColor": undefined,
              "value": "foo",
            },
            Object {
              "label": "bar",
              "textColor": undefined,
              "value": "bar",
            },
          ]
        }
        onChange={[Function]}
        selectedIndex={0}
        style={
          Array [
            Object {
              "height": 216,
            },
            Object {
              "color": null,
            },
          ]
        }
      />
    </View>
  </View>
</Modal>
`;

exports[`iOS BpkPicker light mode should render correctly with a selected value 1`] = `
<Modal
  animationType="slide"
  hardwareAccelerated={false}
  onShow={[Function]}
  supportedOrientations={
    Array [
      "portrait",
      "landscape",
    ]
  }
  transparent={true}
  visible={false}
>
  <View
    accessible={true}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "flex": 1,
      }
    }
  />
  <View
    style={
      Object {
        "backgroundColor": "#d0d4da",
        "bottom": 0,
        "flexDirection": "column",
        "position": "absolute",
        "width": "100%",
      }
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "backgroundColor": "#f9f9f9",
          "borderColor": "rgb(205, 205, 215)",
          "borderTopWidth": 1,
          "flex": 1,
          "flexDirection": "row",
          "height": 45,
          "justifyContent": "flex-end",
          "paddingHorizontal": 16,
        }
      }
    >
      <View
        accessibilityLabel="Done"
        accessibilityRole="button"
        accessible={true}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "opacity": 1,
          }
        }
      >
        <View
          style={
            Array [
              Object {
                "alignItems": "center",
                "flexDirection": "row",
                "justifyContent": "center",
                "minHeight": 32,
              },
            ]
          }
        >
          <Text
            allowFontScaling={false}
            numberOfLines={1}
            style={
              Array [
                Object {
                  "color": "rgb(17, 18, 54)",
                  "fontFamily": "System",
                  "fontSize": 14,
                  "fontWeight": "400",
                  "letterSpacing": 0.154,
                  "textAlign": "left",
                },
                Object {
                  "fontWeight": "700",
                },
                Object {
                  "color": "#007aff",
                  "fontSize": 17,
                },
              ]
            }
          >
            Done
          </Text>
        </View>
      </View>
    </View>
    <View>
      <RCTPicker
        items={
          Array [
            Object {
              "label": "foo",
              "textColor": undefined,
              "value": "foo",
            },
            Object {
              "label": "bar",
              "textColor": undefined,
              "value": "bar",
            },
          ]
        }
        onChange={[Function]}
        selectedIndex={0}
        style={
          Array [
            Object {
              "height": 216,
            },
            Object {
              "color": null,
            },
          ]
        }
      />
    </View>
  </View>
</Modal>
`;
