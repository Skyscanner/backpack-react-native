import groovy.json.JsonSlurper

def safeExtGet(prop, fallback) {
  rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

def getVersionFromJsPackage(project) {
  def packageJson = getPackageJson(project)
  def version = packageJson.version

  def isSnapshot = System.getenv("SNAPSHOT") ?: false
  if (isSnapshot) {
      version = version + "-SNAPSHOT"
  }
  return version
}

def getPackageJson(project) {
  def packageJson = new File(project.projectDir, '../package.json').getText('UTF-8')
  def jsonSlurper = new JsonSlurper()
  return jsonSlurper.parseText(packageJson)
}

def _reactNativeVersion = safeExtGet("reactNative", "+")
def _compileSdkVersion = safeExtGet("compileSdkVersion", 28)
def _targetSdkVersion = safeExtGet("targetSdkVersion", 28)
def _minSdkVersion = safeExtGet("minSdkVersion", 21)
def _buildToolsVersion = safeExtGet("buildToolsVersion", "28.0.3")
def _internalBuild = safeExtGet("internalBuild", false)

apply plugin: "com.android.library"

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

if (_internalBuild) {
  // This should come after the kotlin plugins
  apply plugin: 'com.kezong.fat-aar'

  apply from: './gradle-maven-push.gradle'
}

description='Bridge code for Backpack React Native'

group='net.skyscanner.backpack'

version=getVersionFromJsPackage(project)

android {
  compileSdkVersion _compileSdkVersion
  buildToolsVersion _buildToolsVersion

  defaultConfig {
    minSdkVersion _minSdkVersion
    targetSdkVersion _targetSdkVersion

    versionName getVersionFromJsPackage(project)

    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
  }
}

dependencies {
  compileOnly "com.facebook.react:react-native:${_reactNativeVersion}"
  implementation "com.github.skyscanner:backpack-android:22.0.0"
  if (_internalBuild) {
    // embed deps will be added to the arr directly (fat-jar) and not as a dependency
    embed project(path: ':react-native-dark-mode', configuration: 'default')
  } else {
    api project(':react-native-dark-mode')
  }

//  androidTestImplementation("junit:junit:4.12")
//  androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
////
//  androidTestImplementation("org.powermock:powermock-api-mockito:1.6.2") {
//    exclude group: 'org.mockito', module: 'hamcrest-core'
//    exclude group: 'org.hamcrest', module: 'hamcrest-core'
//    exclude group: 'junit'
//    exclude group: 'org.mockito'
//    exclude group: 'org.objenesis', module: 'objenesis'
//  }
////    exclude group: 'org.hamcrest', module: 'hamcrest-core'
////    exclude group: 'junit', module: 'junit'
////  }
//  androidTestImplementation("org.powermock:powermock-module-junit4-rule:1.6.2")
////  androidTestImplementation("org.powermock:powermock-classloading-xstream:1.6.2")
//  androidTestImplementation("org.mockito:mockito-core:2.19.1")
//
//  androidTestImplementation 'androidx.test.ext:junit:1.1.0'

  androidTestImplementation "androidx.test.ext:junit:1.1.1"
  androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
  androidTestImplementation 'androidx.test:rules:1.2.0'
  androidTestImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.1.0'
  androidTestImplementation 'org.mockito:mockito-android:2.28.2'

  testImplementation 'junit:junit:4.12'

//  androidTestImplementation 'androidx.test:runner:1.1.0'
//  androidTestImplementation 'androidx.test:rules:1.1.0'

//  testImplementation("org.easytesting:fest-assert-core:${FEST_ASSERT_CORE_VERSION}")
//  testImplementation("org.robolectric:robolectric:${ROBOLECTRIC_VERSION}")
}
