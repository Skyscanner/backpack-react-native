// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`iOS BpkChip dark mode should render correctly 1`] = `
<View
  accessibilityLabel="Accessibility label"
  accessibilityRole="button"
  accessible={true}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Array [
        Object {
          "alignItems": "center",
          "backgroundColor": "rgb(44, 44, 46)",
          "borderRadius": 40,
          "flexDirection": "row",
          "justifyContent": "space-between",
          "paddingHorizontal": 16,
          "paddingVertical": 8,
          "shadowColor": "rgb(17, 18, 54)",
          "shadowOffset": Object {
            "height": 0.5,
            "width": 0,
          },
          "shadowOpacity": 0.15,
          "shadowRadius": 1.5,
        },
      ],
      Array [],
    ]
  }
>
  <Text
    allowFontScaling={false}
    style={
      Array [
        Object {
          "color": "rgb(255, 255, 255)",
          "fontFamily": "System",
          "fontSize": 14,
          "fontWeight": "400",
          "letterSpacing": 0.154,
          "textAlign": "left",
        },
        Object {},
        Array [
          Object {
            "color": "rgb(255, 255, 255)",
            "includeFontPadding": false,
          },
        ],
      ]
    }
  >
    Label
  </Text>
  <View
    style={
      Array [
        Object {
          "backgroundColor": "rgb(255, 255, 255)",
          "bottom": 0,
          "flex": 1,
          "left": 0,
          "opacity": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        },
        Object {
          "borderRadius": 40,
        },
      ]
    }
  />
</View>
`;

exports[`iOS BpkChip dark mode should render correctly with "disabled" 1`] = `
<View
  accessibilityLabel="Accessibility label"
  accessibilityRole="button"
  accessible={true}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Array [
        Object {
          "alignItems": "center",
          "backgroundColor": "rgb(44, 44, 46)",
          "borderRadius": 40,
          "flexDirection": "row",
          "justifyContent": "space-between",
          "paddingHorizontal": 16,
          "paddingVertical": 8,
          "shadowColor": "rgb(17, 18, 54)",
          "shadowOffset": Object {
            "height": 0.5,
            "width": 0,
          },
          "shadowOpacity": 0.15,
          "shadowRadius": 1.5,
        },
        Object {
          "backgroundColor": "rgb(44, 44, 46)",
        },
      ],
      Array [],
    ]
  }
>
  <Text
    allowFontScaling={false}
    style={
      Array [
        Object {
          "color": "rgb(255, 255, 255)",
          "fontFamily": "System",
          "fontSize": 14,
          "fontWeight": "400",
          "letterSpacing": 0.154,
          "textAlign": "left",
        },
        Object {},
        Array [
          Object {
            "color": "rgb(255, 255, 255)",
            "includeFontPadding": false,
          },
          Object {
            "color": "rgb(99, 99, 102)",
          },
        ],
      ]
    }
  >
    Label
  </Text>
  <View
    style={
      Array [
        Object {
          "backgroundColor": "rgb(255, 255, 255)",
          "bottom": 0,
          "flex": 1,
          "left": 0,
          "opacity": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        },
        Object {
          "borderRadius": 40,
        },
      ]
    }
  />
</View>
`;

exports[`iOS BpkChip dark mode should render correctly with "selected" 1`] = `
<View
  accessibilityLabel="Accessibility label"
  accessibilityRole="button"
  accessible={true}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Array [
        Object {
          "alignItems": "center",
          "backgroundColor": "rgb(44, 44, 46)",
          "borderRadius": 40,
          "flexDirection": "row",
          "justifyContent": "space-between",
          "paddingHorizontal": 16,
          "paddingVertical": 8,
          "shadowColor": "rgb(17, 18, 54)",
          "shadowOffset": Object {
            "height": 0.5,
            "width": 0,
          },
          "shadowOpacity": 0.15,
          "shadowRadius": 1.5,
        },
        Object {
          "backgroundColor": "rgb(7, 112, 227)",
        },
      ],
      Array [],
    ]
  }
>
  <Text
    allowFontScaling={false}
    style={
      Array [
        Object {
          "color": "rgb(255, 255, 255)",
          "fontFamily": "System",
          "fontSize": 14,
          "fontWeight": "400",
          "letterSpacing": 0.154,
          "textAlign": "left",
        },
        Object {},
        Array [
          Object {
            "color": "rgb(255, 255, 255)",
            "includeFontPadding": false,
          },
          Object {
            "color": "rgb(255, 255, 255)",
          },
        ],
      ]
    }
  >
    Label
  </Text>
  <View
    style={
      Array [
        Object {
          "backgroundColor": "rgb(255, 255, 255)",
          "bottom": 0,
          "flex": 1,
          "left": 0,
          "opacity": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        },
        Object {
          "borderRadius": 40,
        },
      ]
    }
  />
</View>
`;

exports[`iOS BpkChip dark mode should render outline correctly 1`] = `
<View
  accessibilityLabel="Accessibility label"
  accessibilityRole="button"
  accessible={true}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Array [
        Object {
          "alignItems": "center",
          "backgroundColor": "rgb(44, 44, 46)",
          "borderRadius": 40,
          "flexDirection": "row",
          "justifyContent": "space-between",
          "paddingHorizontal": 16,
          "paddingVertical": 8,
          "shadowColor": "rgb(17, 18, 54)",
          "shadowOffset": Object {
            "height": 0.5,
            "width": 0,
          },
          "shadowOpacity": 0.15,
          "shadowRadius": 1.5,
        },
        Object {
          "backgroundColor": "transparent",
          "borderColor": "rgb(72, 72, 74)",
          "borderWidth": 1,
          "paddingVertical": 7,
        },
      ],
      Array [
        Object {
          "elevation": 0,
        },
      ],
    ]
  }
>
  <Text
    allowFontScaling={false}
    style={
      Array [
        Object {
          "color": "rgb(255, 255, 255)",
          "fontFamily": "System",
          "fontSize": 14,
          "fontWeight": "400",
          "letterSpacing": 0.154,
          "textAlign": "left",
        },
        Object {},
        Array [
          Object {
            "color": "rgb(255, 255, 255)",
            "includeFontPadding": false,
          },
          Object {
            "color": "rgb(255, 255, 255)",
          },
        ],
      ]
    }
  >
    Label
  </Text>
  <View
    style={
      Array [
        Object {
          "backgroundColor": "rgb(255, 255, 255)",
          "bottom": 0,
          "flex": 1,
          "left": 0,
          "opacity": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        },
        Object {
          "borderRadius": 40,
        },
      ]
    }
  />
</View>
`;

exports[`iOS BpkChip light mode should render correctly 1`] = `
<View
  accessibilityLabel="Accessibility label"
  accessibilityRole="button"
  accessible={true}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Array [
        Object {
          "alignItems": "center",
          "backgroundColor": "rgb(255, 255, 255)",
          "borderRadius": 40,
          "flexDirection": "row",
          "justifyContent": "space-between",
          "paddingHorizontal": 16,
          "paddingVertical": 8,
          "shadowColor": "rgb(17, 18, 54)",
          "shadowOffset": Object {
            "height": 0.5,
            "width": 0,
          },
          "shadowOpacity": 0.15,
          "shadowRadius": 1.5,
        },
      ],
      Array [],
    ]
  }
>
  <Text
    allowFontScaling={false}
    style={
      Array [
        Object {
          "color": "rgb(17, 18, 54)",
          "fontFamily": "System",
          "fontSize": 14,
          "fontWeight": "400",
          "letterSpacing": 0.154,
          "textAlign": "left",
        },
        Object {},
        Array [
          Object {
            "color": "rgb(17, 18, 54)",
            "includeFontPadding": false,
          },
        ],
      ]
    }
  >
    Label
  </Text>
  <View
    style={
      Array [
        Object {
          "backgroundColor": "rgb(17, 18, 54)",
          "bottom": 0,
          "flex": 1,
          "left": 0,
          "opacity": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        },
        Object {
          "borderRadius": 40,
        },
      ]
    }
  />
</View>
`;

exports[`iOS BpkChip light mode should render correctly with "disabled" 1`] = `
<View
  accessibilityLabel="Accessibility label"
  accessibilityRole="button"
  accessible={true}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Array [
        Object {
          "alignItems": "center",
          "backgroundColor": "rgb(255, 255, 255)",
          "borderRadius": 40,
          "flexDirection": "row",
          "justifyContent": "space-between",
          "paddingHorizontal": 16,
          "paddingVertical": 8,
          "shadowColor": "rgb(17, 18, 54)",
          "shadowOffset": Object {
            "height": 0.5,
            "width": 0,
          },
          "shadowOpacity": 0.15,
          "shadowRadius": 1.5,
        },
        Object {
          "backgroundColor": "rgb(255, 255, 255)",
        },
      ],
      Array [],
    ]
  }
>
  <Text
    allowFontScaling={false}
    style={
      Array [
        Object {
          "color": "rgb(17, 18, 54)",
          "fontFamily": "System",
          "fontSize": 14,
          "fontWeight": "400",
          "letterSpacing": 0.154,
          "textAlign": "left",
        },
        Object {},
        Array [
          Object {
            "color": "rgb(17, 18, 54)",
            "includeFontPadding": false,
          },
          Object {
            "color": "rgb(178, 178, 191)",
          },
        ],
      ]
    }
  >
    Label
  </Text>
  <View
    style={
      Array [
        Object {
          "backgroundColor": "rgb(17, 18, 54)",
          "bottom": 0,
          "flex": 1,
          "left": 0,
          "opacity": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        },
        Object {
          "borderRadius": 40,
        },
      ]
    }
  />
</View>
`;

exports[`iOS BpkChip light mode should render correctly with "selected" 1`] = `
<View
  accessibilityLabel="Accessibility label"
  accessibilityRole="button"
  accessible={true}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Array [
        Object {
          "alignItems": "center",
          "backgroundColor": "rgb(255, 255, 255)",
          "borderRadius": 40,
          "flexDirection": "row",
          "justifyContent": "space-between",
          "paddingHorizontal": 16,
          "paddingVertical": 8,
          "shadowColor": "rgb(17, 18, 54)",
          "shadowOffset": Object {
            "height": 0.5,
            "width": 0,
          },
          "shadowOpacity": 0.15,
          "shadowRadius": 1.5,
        },
        Object {
          "backgroundColor": "rgb(7, 112, 227)",
        },
      ],
      Array [],
    ]
  }
>
  <Text
    allowFontScaling={false}
    style={
      Array [
        Object {
          "color": "rgb(17, 18, 54)",
          "fontFamily": "System",
          "fontSize": 14,
          "fontWeight": "400",
          "letterSpacing": 0.154,
          "textAlign": "left",
        },
        Object {},
        Array [
          Object {
            "color": "rgb(17, 18, 54)",
            "includeFontPadding": false,
          },
          Object {
            "color": "rgb(255, 255, 255)",
          },
        ],
      ]
    }
  >
    Label
  </Text>
  <View
    style={
      Array [
        Object {
          "backgroundColor": "rgb(17, 18, 54)",
          "bottom": 0,
          "flex": 1,
          "left": 0,
          "opacity": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        },
        Object {
          "borderRadius": 40,
        },
      ]
    }
  />
</View>
`;

exports[`iOS BpkChip light mode should render outline correctly 1`] = `
<View
  accessibilityLabel="Accessibility label"
  accessibilityRole="button"
  accessible={true}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Array [
        Object {
          "alignItems": "center",
          "backgroundColor": "rgb(255, 255, 255)",
          "borderRadius": 40,
          "flexDirection": "row",
          "justifyContent": "space-between",
          "paddingHorizontal": 16,
          "paddingVertical": 8,
          "shadowColor": "rgb(17, 18, 54)",
          "shadowOffset": Object {
            "height": 0.5,
            "width": 0,
          },
          "shadowOpacity": 0.15,
          "shadowRadius": 1.5,
        },
        Object {
          "backgroundColor": "transparent",
          "borderColor": "rgb(72, 72, 74)",
          "borderWidth": 1,
          "paddingVertical": 7,
        },
      ],
      Array [
        Object {
          "elevation": 0,
        },
      ],
    ]
  }
>
  <Text
    allowFontScaling={false}
    style={
      Array [
        Object {
          "color": "rgb(17, 18, 54)",
          "fontFamily": "System",
          "fontSize": 14,
          "fontWeight": "400",
          "letterSpacing": 0.154,
          "textAlign": "left",
        },
        Object {},
        Array [
          Object {
            "color": "rgb(17, 18, 54)",
            "includeFontPadding": false,
          },
          Object {
            "color": "rgb(255, 255, 255)",
          },
        ],
      ]
    }
  >
    Label
  </Text>
  <View
    style={
      Array [
        Object {
          "backgroundColor": "rgb(17, 18, 54)",
          "bottom": 0,
          "flex": 1,
          "left": 0,
          "opacity": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        },
        Object {
          "borderRadius": 40,
        },
      ]
    }
  />
</View>
`;

exports[`iOS BpkChip should render correctly with arbitrary props 1`] = `
<View
  accessibilityLabel="Accessibility label"
  accessibilityRole="button"
  accessible={true}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Array [
        Object {
          "alignItems": "center",
          "backgroundColor": "rgb(255, 255, 255)",
          "borderRadius": 40,
          "flexDirection": "row",
          "justifyContent": "space-between",
          "paddingHorizontal": 16,
          "paddingVertical": 8,
          "shadowColor": "rgb(17, 18, 54)",
          "shadowOffset": Object {
            "height": 0.5,
            "width": 0,
          },
          "shadowOpacity": 0.15,
          "shadowRadius": 1.5,
        },
      ],
      Array [],
    ]
  }
  testID="123"
>
  <Text
    allowFontScaling={false}
    style={
      Array [
        Object {
          "color": "rgb(17, 18, 54)",
          "fontFamily": "System",
          "fontSize": 14,
          "fontWeight": "400",
          "letterSpacing": 0.154,
          "textAlign": "left",
        },
        Object {},
        Array [
          Object {
            "color": "rgb(17, 18, 54)",
            "includeFontPadding": false,
          },
        ],
      ]
    }
  >
    Label
  </Text>
  <View
    style={
      Array [
        Object {
          "backgroundColor": "rgb(17, 18, 54)",
          "bottom": 0,
          "flex": 1,
          "left": 0,
          "opacity": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        },
        Object {
          "borderRadius": 40,
        },
      ]
    }
  />
</View>
`;

exports[`iOS BpkChip should render correctly with custom style 1`] = `
<View
  accessibilityLabel="Accessibility label"
  accessibilityRole="button"
  accessible={true}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Array [
        Object {
          "alignItems": "center",
          "backgroundColor": "rgb(255, 255, 255)",
          "borderRadius": 40,
          "flexDirection": "row",
          "justifyContent": "space-between",
          "paddingHorizontal": 16,
          "paddingVertical": 8,
          "shadowColor": "rgb(17, 18, 54)",
          "shadowOffset": Object {
            "height": 0.5,
            "width": 0,
          },
          "shadowOpacity": 0.15,
          "shadowRadius": 1.5,
        },
      ],
      Array [
        Object {
          "flex": 1,
        },
      ],
    ]
  }
>
  <Text
    allowFontScaling={false}
    style={
      Array [
        Object {
          "color": "rgb(17, 18, 54)",
          "fontFamily": "System",
          "fontSize": 14,
          "fontWeight": "400",
          "letterSpacing": 0.154,
          "textAlign": "left",
        },
        Object {},
        Array [
          Object {
            "color": "rgb(17, 18, 54)",
            "includeFontPadding": false,
          },
        ],
      ]
    }
  >
    Label
  </Text>
  <View
    style={
      Array [
        Object {
          "backgroundColor": "rgb(17, 18, 54)",
          "bottom": 0,
          "flex": 1,
          "left": 0,
          "opacity": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        },
        Object {
          "borderRadius": 40,
        },
      ]
    }
  />
</View>
`;

exports[`iOS BpkChip should render correctly with leadingAccessoryView 1`] = `
<View
  accessibilityLabel="Accessibility label"
  accessibilityRole="button"
  accessible={true}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Array [
        Object {
          "alignItems": "center",
          "backgroundColor": "rgb(255, 255, 255)",
          "borderRadius": 40,
          "flexDirection": "row",
          "justifyContent": "space-between",
          "paddingHorizontal": 16,
          "paddingVertical": 8,
          "shadowColor": "rgb(17, 18, 54)",
          "shadowOffset": Object {
            "height": 0.5,
            "width": 0,
          },
          "shadowOpacity": 0.15,
          "shadowRadius": 1.5,
        },
      ],
      Array [],
    ]
  }
>
  <Text
    allowFontScaling={false}
    style={
      Array [
        Object {
          "color": "rgb(17, 18, 54)",
          "fontFamily": "BpkIcon",
          "fontSize": 24,
          "includeFontPadding": false,
        },
        Array [
          Object {
            "color": "rgb(17, 18, 54)",
            "includeFontPadding": false,
          },
        ],
      ]
    }
  >
    
  </Text>
  <Text
    allowFontScaling={false}
    style={
      Array [
        Object {
          "color": "rgb(17, 18, 54)",
          "fontFamily": "System",
          "fontSize": 14,
          "fontWeight": "400",
          "letterSpacing": 0.154,
          "textAlign": "left",
        },
        Object {},
        Array [
          Object {
            "color": "rgb(17, 18, 54)",
            "includeFontPadding": false,
          },
          Object {
            "marginStart": 4,
          },
        ],
      ]
    }
  >
    Label
  </Text>
  <View
    style={
      Array [
        Object {
          "backgroundColor": "rgb(17, 18, 54)",
          "bottom": 0,
          "flex": 1,
          "left": 0,
          "opacity": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        },
        Object {
          "borderRadius": 40,
        },
      ]
    }
  />
</View>
`;

exports[`iOS BpkChip should render correctly with trailingAccessoryView 1`] = `
<View
  accessibilityLabel="Accessibility label"
  accessibilityRole="button"
  accessible={true}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Array [
        Object {
          "alignItems": "center",
          "backgroundColor": "rgb(255, 255, 255)",
          "borderRadius": 40,
          "flexDirection": "row",
          "justifyContent": "space-between",
          "paddingHorizontal": 16,
          "paddingVertical": 8,
          "shadowColor": "rgb(17, 18, 54)",
          "shadowOffset": Object {
            "height": 0.5,
            "width": 0,
          },
          "shadowOpacity": 0.15,
          "shadowRadius": 1.5,
        },
      ],
      Array [],
    ]
  }
>
  <Text
    allowFontScaling={false}
    style={
      Array [
        Object {
          "color": "rgb(17, 18, 54)",
          "fontFamily": "System",
          "fontSize": 14,
          "fontWeight": "400",
          "letterSpacing": 0.154,
          "textAlign": "left",
        },
        Object {},
        Array [
          Object {
            "color": "rgb(17, 18, 54)",
            "includeFontPadding": false,
          },
          Object {
            "marginEnd": 4,
          },
        ],
      ]
    }
  >
    Label
  </Text>
  <Text
    allowFontScaling={false}
    style={
      Array [
        Object {
          "color": "rgb(17, 18, 54)",
          "fontFamily": "BpkIcon",
          "fontSize": 24,
          "includeFontPadding": false,
        },
        Array [
          Object {
            "color": "rgb(17, 18, 54)",
            "includeFontPadding": false,
          },
        ],
      ]
    }
  >
    
  </Text>
  <View
    style={
      Array [
        Object {
          "backgroundColor": "rgb(17, 18, 54)",
          "bottom": 0,
          "flex": 1,
          "left": 0,
          "opacity": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        },
        Object {
          "borderRadius": 40,
        },
      ]
    }
  />
</View>
`;

exports[`iOS BpkChip should support theming when selected 1`] = `
<View
  accessibilityLabel="Accessibility label"
  accessibilityRole="button"
  accessible={true}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Array [
        Object {
          "alignItems": "center",
          "backgroundColor": "rgb(255, 255, 255)",
          "borderRadius": 40,
          "flexDirection": "row",
          "justifyContent": "space-between",
          "paddingHorizontal": 16,
          "paddingVertical": 8,
          "shadowColor": "rgb(17, 18, 54)",
          "shadowOffset": Object {
            "height": 0.5,
            "width": 0,
          },
          "shadowOpacity": 0.15,
          "shadowRadius": 1.5,
        },
        Object {
          "backgroundColor": "rgb(7, 112, 227)",
        },
        Object {
          "backgroundColor": "red",
        },
      ],
      Array [],
    ]
  }
>
  <Text
    allowFontScaling={false}
    style={
      Array [
        Object {
          "color": "rgb(17, 18, 54)",
          "fontFamily": "System",
          "fontSize": 14,
          "fontWeight": "400",
          "letterSpacing": 0.154,
          "textAlign": "left",
        },
        Object {},
        Object {
          "fontFamily": "relative",
        },
        Array [
          Object {
            "color": "rgb(17, 18, 54)",
            "includeFontPadding": false,
          },
          Object {
            "color": "rgb(255, 255, 255)",
          },
          Object {
            "color": "yellow",
          },
        ],
      ]
    }
  >
    Label
  </Text>
  <View
    style={
      Array [
        Object {
          "backgroundColor": "rgb(17, 18, 54)",
          "bottom": 0,
          "flex": 1,
          "left": 0,
          "opacity": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        },
        Object {
          "borderRadius": 40,
        },
      ]
    }
  />
</View>
`;
